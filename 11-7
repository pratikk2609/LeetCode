// Merge K sorted lists
// leetcode
// date - 11-07


class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null;
        }
        return mergeKListsHelper(lists, 0, lists.length - 1);
    }
    
    private ListNode mergeKListsHelper(ListNode[] lists, int start, int end) {
        if (start == end) {
            return lists[start];
        }
        if (start + 1 == end) {
            return merge(lists[start], lists[end]);
        }
        int mid = start + (end - start) / 2;
        ListNode left = mergeKListsHelper(lists, start, mid);
        ListNode right = mergeKListsHelper(lists, mid + 1, end);
        return merge(left, right);
    }
    
    private ListNode merge(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                curr.next = l1;
                l1 = l1.next;
            } else {
                curr.next = l2;
                l2 = l2.next;
            }
            curr = curr.next;
        }
        
        curr.next = (l1 != null) ? l1 : l2;
        
        return dummy.next;
    }
}




// daily problem - reverse substring betweem each pair of paranthesis
//medium

class Solution {
    public String reverseParentheses(String s) {
        Stack<Character> stack=new Stack<>();
        String ans="";
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)!=')'){
                stack.push(s.charAt(i));
            }else{
                while(stack.peek()!='('){
                ans+=stack.pop();
                }
                stack.pop();
                // if(!stack.isEmpty()){
                    for(int j=0;j<ans.length();j++){
                        stack.push(ans.charAt(j));
                    }
                    ans="";
                // }
                
            }
        }
        while(!stack.isEmpty()){
            ans=stack.pop()+ans;
        }
        return ans;
    }
}





// que - remove duplicates from sorted list
// easy

class Solution {
public ListNode deleteDuplicates(ListNode head) {
ListNode current = head;

    if(head==null){
        return null;
    }
    
    while(current.next!=null){
        if(current.val==current.next.val){
            current.next = current.next.next;
            continue;
        }
        current = current.next;
    }
    
    return head;
}
}
