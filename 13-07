// DAILY PROBLEM - ROBOT COLLISION

import java.util.*;

class Solution {
    public List<Integer> survivedRobotsHealths(int[] positions, int[] healths, String directions) {
        int n = positions.length;
        List<Integer> ind = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            ind.add(i);
        }
        Collections.sort(ind, (x, y) -> Integer.compare(positions[x], positions[y]));
        Stack<Integer> s = new Stack<>();
        for (int x : ind) {
            if (directions.charAt(x) == 'L') {
                while (!s.empty()) {
                    int y = s.peek();
                    if (healths[x] == healths[y]) {
                        healths[x] = 0;
                        healths[y] = 0;
                        s.pop();
                        break;
                    }
                    if (healths[x] > healths[y]) {
                        healths[x]--;
                        healths[y] = 0;
                        s.pop();
                    } else {
                        healths[x] = 0;
                        healths[y]--;
                        break;
                    }
                }  
            } else {
                s.push(x);
            }
        }
        List<Integer> result = new ArrayList<>();
        for (int x : healths) {
            if (x != 0) {
                result.add(x);
            }
        }
        return result;
    }
}


// GROUP ANAGRAMS

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> map = new HashMap<>();
        
        for (String word : strs) {
            char[] chars = word.toCharArray();
            Arrays.sort(chars);
            String sortedWord = new String(chars);
            
            if (!map.containsKey(sortedWord)) {
                map.put(sortedWord, new ArrayList<>());
            }
            
            map.get(sortedWord).add(word);
        }
        
        return new ArrayList<>(map.values());
    }
}


// WORD SEARCH

public class Solution {
    public boolean exist(char[][] board, String word) {
        int rows = board.length;
        int cols = board[0].length;
        boolean[][] visited = new boolean[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (dfs(board, word, i, j, 0, visited)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean dfs(char[][] board, String word, int i, int j, int index, boolean[][] visited) {
        if (index == word.length()) {
            return true;
        }
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index) || visited[i][j]) {
            return false;
        }

        visited[i][j] = true;
        boolean found = dfs(board, word, i + 1, j, index + 1, visited) ||
                        dfs(board, word, i - 1, j, index + 1, visited) ||
                        dfs(board, word, i, j + 1, index + 1, visited) ||
                        dfs(board, word, i, j - 1, index + 1, visited);
        visited[i][j] = false;

        return found;
    }
}


// 3 consecutive odds

public class Solution {
    public boolean threeConsecutiveOdds(int[] arr) {
        for (int i = 0; i < arr.length - 2; i++) {
            if (arr[i] % 2 == 1 && arr[i + 1] % 2 == 1 && arr[i + 2] % 2 == 1) {
                return true;
            }
        }
        return false;
    }
}



// AVERAGE WAITING TIME

class Solution {
    public double averageWaitingTime(int[][] customers) {
        
        
        double ans = 0.0;
        int n = customers.length;
        
        int check = 0;
        
        for(int i=0;i<customers.length;i++){
            
              
            if(check<customers[i][0]){   
                check = customers[i][0]+customers[i][1];
            }else
                check=customers[i][1]+check;
          
            
            ans+=check-customers[i][0];
        }
        
        return ans/n;
        
    }
}



// INTERSECTION OF TWO ARRAYS 2

class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        List<Integer> arr = new ArrayList<>();
        for(int i=0; i< nums1.length; i++){
            for(int j=0; j<nums2.length; j++){
                if(nums1[i] == nums2[j]){
                    arr.add(nums1[i]);
                    nums2[j] = -1;
                    break;
                }
            }
        }

        int[] arr1 = new int[arr.size()];

        for(int i=0; i<arr1.length; i++){
            arr1[i] = arr.get(i);
        }
        return arr1;
    }
}
