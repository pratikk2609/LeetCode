// reverse list

class Solution {
    public void reorderList(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null){ //half the LL
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode temp = slow.next;
        slow.next = null;
        ListNode prev = null; 

        while(temp != null){ //reverse second half
             ListNode n = temp.next;
             temp.next = prev;
             prev = temp;
             temp = n;
        }
        ListNode curr = head;
        while(prev != null){
            ListNode n = curr.next;
            curr.next = prev;
            prev = prev.next;
            curr.next.next = n;
            curr = n;
        }
    }
}


// daily ques
// create binary tree from description

class Solution {
    public TreeNode createBinaryTree(int[][] descriptions) {
        TreeNode[] map = new TreeNode[100001];
        boolean[] child = new boolean[100001];
        for (int[] d : descriptions){
            if (map[d[0]] == null) map[d[0]] = new TreeNode(d[0]);
            TreeNode node = (map[d[1]] == null ? new TreeNode(d[1]) : map[d[1]]);
            if (d[2] == 1) map[d[0]].left = node;
            else map[d[0]].right = node;
            map[node.val] = node;
            child[d[1]] = true;
        }
        for (int[] d : descriptions)
            if (!child[d[0]])
                return map[d[0]];
        return null;
    }
}


// linked list cycle

class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false;
        }
        
        ListNode slow = head;
        ListNode fast = head.next;
        
        while (slow != fast) {
            if (fast == null || fast.next == null) {
                return false;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        
        return true;
    }
}
